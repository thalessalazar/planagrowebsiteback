document.addEventListener("DOMContentLoaded", function () {
    !function (t, e, n) { "use strict"; n.expr[":"].icontains = n.expr.createPseudo(function (t) { return function (e) { return n(e).text().toUpperCase().indexOf(t.toUpperCase()) >= 0 } }); var a, o, r, i, s, p, d, l = (a = function (t, e) { var a = this.data("options"), o = n(a.templateMenuItem), r = n(a.templateMenuItemLink); return r.text(n(e).text()), n(e).prop("disabled") && (o.addClass("disabled"), r.prop("tabIndex", -1)), o.append(r) }, o = function (t) { t.data("$buttonText").text(t.find(":selected").text()) }, r = function (t) { t.data("$button").prop("disabled", t.prop("disabled")) }, i = function (t) { var e = n(t.delegateTarget); o(e), r(e), function (t) { t.data("$button").focus() }(e) }, s = function (t) { t.preventDefault(); var e = n(t.delegateTarget), a = n(t.currentTarget), o = e.data("$select"), r = e.find("li").index(a), i = o.find("option").eq(r); i.prop("disabled") || i.prop("selected", !0).change() }, p = function (t) { var e = n(this), a = e.find(".dropdown input"); if (a.length) a.focus(); else { var o = e.data("$select").find(":selected").index(); e.find("li:eq(" + o + ") a").focus() } }, d = function (t) { var e = n(this).find("li").hide().filter(":icontains(" + n(t.target).val() + ")").show(), a = n(this).find(".help-block"); e.length ? a.hide() : a.show() }, { transformSelect: function () { var t = n(this), e = function (t) { var e = t.data("options"), a = n(e.templateButtonIcon); return t.data("$buttonIcon", a), a }(t), l = function (t) { var e = t.data("options"), a = n(e.templateButtonText); return t.data("$buttonText", a), a }(t), u = function (t) { var e = t.data("options"), a = n(e.templateButton); return a.addClass(e.classButtonStyle), t.data("$button", a), a }(t); u.append(l), u.append(e); var c = function (t) { var e = t.data("options"), a = n(e.templateButtonGroup); return a.data("$select", t), a }(t), f = function (t) { var e = n.proxy(a, t); return t.find("option").map(e).toArray() }(t), h = function (t, e) { var a = t.data("options"); return e > a.minItemsForSearch ? n(a.templateSearchForm) : n() }(t, f.length), m = function (t) { var e = t.data("options"); return n(e.templateMenu) }(t); h.length && f.unshift(h), m.append(f), c.append(u), c.append(m), function (t, e) { var a = t.data("options"), o = t.attr("id"), r = a.labelPrefix + t.attr("id"); n('label[for="' + o + '"]').attr("for", r), e.attr("id", r) }(t, u), c.insertAfter(t), o(t), r(t), t.on("change", i), c.on("click", "li", s), c.on("shown.bs.dropdown", p), c.on(".dropdown input", d) } }); n.fn.bootstrapSelectToButton = function (t) { return t = n.extend({}, n.fn.bootstrapSelectToButton.defaults, t), this.each(function () { n(this).data("options", t), this.style.display = "none", l.transformSelect.call(this) }) }, n.fn.bootstrapSelectToButton.defaults = { templateButton: '<button type="button" class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>', templateButtonIcon: '<span class="caret"></span>', templateButtonText: "<span>{text}</span>", templateButtonGroup: '<div class="btn-group"></div>', templateMenu: '<ul class="dropdown-menu"></ul>', templateMenuItem: "<li></li>", templateMenuItemLink: '<a href="#"></a>', templateSearchForm: '<div class="dropdown"><form><input class="form-control" placeholder="Search"><span class="help-block" style="display:none">No results found</span></form></div>', classButtonStyle: "btn-option", minItemsForSearch: 1 / 0, labelPrefix: "bstb-" } }(0, this.document, this.jQuery);
});